// Generated by jextract

package org.breizhjug.jdk21.panama.libzstd;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class libzstd_h  {

    public static final OfByte C_CHAR = JAVA_BYTE;
    public static final OfShort C_SHORT = JAVA_SHORT;
    public static final OfInt C_INT = JAVA_INT;
    public static final OfLong C_LONG = JAVA_LONG;
    public static final OfLong C_LONG_LONG = JAVA_LONG;
    public static final OfFloat C_FLOAT = JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * #define __DARWIN_ONLY_64_BIT_INO_T 0
     * }
     */
    public static int __DARWIN_ONLY_64_BIT_INO_T() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_ONLY_UNIX_CONFORMANCE 1
     * }
     */
    public static int __DARWIN_ONLY_UNIX_CONFORMANCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_ONLY_VERS_1050 0
     * }
     */
    public static int __DARWIN_ONLY_VERS_1050() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_UNIX03 1
     * }
     */
    public static int __DARWIN_UNIX03() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_64_BIT_INO_T 1
     * }
     */
    public static int __DARWIN_64_BIT_INO_T() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_VERS_1050 1
     * }
     */
    public static int __DARWIN_VERS_1050() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_NON_CANCELABLE 0
     * }
     */
    public static int __DARWIN_NON_CANCELABLE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __STDC_WANT_LIB_EXT1__ 1
     * }
     */
    public static int __STDC_WANT_LIB_EXT1__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_NO_LONG_LONG 0
     * }
     */
    public static int __DARWIN_NO_LONG_LONG() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _DARWIN_FEATURE_64_BIT_INODE 1
     * }
     */
    public static int _DARWIN_FEATURE_64_BIT_INODE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _DARWIN_FEATURE_UNIX_CONFORMANCE 3
     * }
     */
    public static int _DARWIN_FEATURE_UNIX_CONFORMANCE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define __has_ptrcheck 0
     * }
     */
    public static int __has_ptrcheck() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_CLK_TCK 100
     * }
     */
    public static int __DARWIN_CLK_TCK() {
        return (int)100L;
    }
    /**
     * {@snippet :
     * #define MB_LEN_MAX 6
     * }
     */
    public static int MB_LEN_MAX() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define CHAR_BIT 8
     * }
     */
    public static int CHAR_BIT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define SCHAR_MAX 127
     * }
     */
    public static int SCHAR_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define UCHAR_MAX 255
     * }
     */
    public static int UCHAR_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define CHAR_MAX 127
     * }
     */
    public static int CHAR_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define USHRT_MAX 65535
     * }
     */
    public static int USHRT_MAX() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define SHRT_MAX 32767
     * }
     */
    public static int SHRT_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define INT_MAX 2147483647
     * }
     */
    public static int INT_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define LONG_BIT 64
     * }
     */
    public static int LONG_BIT() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define WORD_BIT 32
     * }
     */
    public static int WORD_BIT() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define CHILD_MAX 266
     * }
     */
    public static int CHILD_MAX() {
        return (int)266L;
    }
    /**
     * {@snippet :
     * #define LINK_MAX 32767
     * }
     */
    public static int LINK_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define MAX_CANON 1024
     * }
     */
    public static int MAX_CANON() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define MAX_INPUT 1024
     * }
     */
    public static int MAX_INPUT() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define NAME_MAX 255
     * }
     */
    public static int NAME_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define NGROUPS_MAX 16
     * }
     */
    public static int NGROUPS_MAX() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define OPEN_MAX 10240
     * }
     */
    public static int OPEN_MAX() {
        return (int)10240L;
    }
    /**
     * {@snippet :
     * #define PATH_MAX 1024
     * }
     */
    public static int PATH_MAX() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define PIPE_BUF 512
     * }
     */
    public static int PIPE_BUF() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define BC_BASE_MAX 99
     * }
     */
    public static int BC_BASE_MAX() {
        return (int)99L;
    }
    /**
     * {@snippet :
     * #define BC_DIM_MAX 2048
     * }
     */
    public static int BC_DIM_MAX() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define BC_SCALE_MAX 99
     * }
     */
    public static int BC_SCALE_MAX() {
        return (int)99L;
    }
    /**
     * {@snippet :
     * #define BC_STRING_MAX 1000
     * }
     */
    public static int BC_STRING_MAX() {
        return (int)1000L;
    }
    /**
     * {@snippet :
     * #define CHARCLASS_NAME_MAX 14
     * }
     */
    public static int CHARCLASS_NAME_MAX() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define COLL_WEIGHTS_MAX 2
     * }
     */
    public static int COLL_WEIGHTS_MAX() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define EQUIV_CLASS_MAX 2
     * }
     */
    public static int EQUIV_CLASS_MAX() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define EXPR_NEST_MAX 32
     * }
     */
    public static int EXPR_NEST_MAX() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define LINE_MAX 2048
     * }
     */
    public static int LINE_MAX() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define RE_DUP_MAX 255
     * }
     */
    public static int RE_DUP_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define NZERO 20
     * }
     */
    public static int NZERO() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define _POSIX_ARG_MAX 4096
     * }
     */
    public static int _POSIX_ARG_MAX() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define _POSIX_CHILD_MAX 25
     * }
     */
    public static int _POSIX_CHILD_MAX() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * #define _POSIX_LINK_MAX 8
     * }
     */
    public static int _POSIX_LINK_MAX() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define _POSIX_MAX_CANON 255
     * }
     */
    public static int _POSIX_MAX_CANON() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define _POSIX_MAX_INPUT 255
     * }
     */
    public static int _POSIX_MAX_INPUT() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define _POSIX_NAME_MAX 14
     * }
     */
    public static int _POSIX_NAME_MAX() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define _POSIX_NGROUPS_MAX 8
     * }
     */
    public static int _POSIX_NGROUPS_MAX() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define _POSIX_OPEN_MAX 20
     * }
     */
    public static int _POSIX_OPEN_MAX() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define _POSIX_PATH_MAX 256
     * }
     */
    public static int _POSIX_PATH_MAX() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define _POSIX_PIPE_BUF 512
     * }
     */
    public static int _POSIX_PIPE_BUF() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SSIZE_MAX 32767
     * }
     */
    public static int _POSIX_SSIZE_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define _POSIX_STREAM_MAX 8
     * }
     */
    public static int _POSIX_STREAM_MAX() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define _POSIX_TZNAME_MAX 6
     * }
     */
    public static int _POSIX_TZNAME_MAX() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_BC_BASE_MAX 99
     * }
     */
    public static int _POSIX2_BC_BASE_MAX() {
        return (int)99L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_BC_DIM_MAX 2048
     * }
     */
    public static int _POSIX2_BC_DIM_MAX() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_BC_SCALE_MAX 99
     * }
     */
    public static int _POSIX2_BC_SCALE_MAX() {
        return (int)99L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_BC_STRING_MAX 1000
     * }
     */
    public static int _POSIX2_BC_STRING_MAX() {
        return (int)1000L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_EQUIV_CLASS_MAX 2
     * }
     */
    public static int _POSIX2_EQUIV_CLASS_MAX() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_EXPR_NEST_MAX 32
     * }
     */
    public static int _POSIX2_EXPR_NEST_MAX() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_LINE_MAX 2048
     * }
     */
    public static int _POSIX2_LINE_MAX() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_RE_DUP_MAX 255
     * }
     */
    public static int _POSIX2_RE_DUP_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define _POSIX_AIO_LISTIO_MAX 2
     * }
     */
    public static int _POSIX_AIO_LISTIO_MAX() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define _POSIX_AIO_MAX 1
     * }
     */
    public static int _POSIX_AIO_MAX() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_DELAYTIMER_MAX 32
     * }
     */
    public static int _POSIX_DELAYTIMER_MAX() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define _POSIX_MQ_OPEN_MAX 8
     * }
     */
    public static int _POSIX_MQ_OPEN_MAX() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define _POSIX_MQ_PRIO_MAX 32
     * }
     */
    public static int _POSIX_MQ_PRIO_MAX() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define _POSIX_RTSIG_MAX 8
     * }
     */
    public static int _POSIX_RTSIG_MAX() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SEM_NSEMS_MAX 256
     * }
     */
    public static int _POSIX_SEM_NSEMS_MAX() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SEM_VALUE_MAX 32767
     * }
     */
    public static int _POSIX_SEM_VALUE_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SIGQUEUE_MAX 32
     * }
     */
    public static int _POSIX_SIGQUEUE_MAX() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define _POSIX_TIMER_MAX 32
     * }
     */
    public static int _POSIX_TIMER_MAX() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define _POSIX_CLOCKRES_MIN 20000000
     * }
     */
    public static int _POSIX_CLOCKRES_MIN() {
        return (int)20000000L;
    }
    /**
     * {@snippet :
     * #define _POSIX_THREAD_DESTRUCTOR_ITERATIONS 4
     * }
     */
    public static int _POSIX_THREAD_DESTRUCTOR_ITERATIONS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define _POSIX_THREAD_KEYS_MAX 128
     * }
     */
    public static int _POSIX_THREAD_KEYS_MAX() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define _POSIX_THREAD_THREADS_MAX 64
     * }
     */
    public static int _POSIX_THREAD_THREADS_MAX() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define PTHREAD_DESTRUCTOR_ITERATIONS 4
     * }
     */
    public static int PTHREAD_DESTRUCTOR_ITERATIONS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define PTHREAD_KEYS_MAX 512
     * }
     */
    public static int PTHREAD_KEYS_MAX() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define PTHREAD_STACK_MIN 8192
     * }
     */
    public static int PTHREAD_STACK_MIN() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * #define _POSIX_HOST_NAME_MAX 255
     * }
     */
    public static int _POSIX_HOST_NAME_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define _POSIX_LOGIN_NAME_MAX 9
     * }
     */
    public static int _POSIX_LOGIN_NAME_MAX() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SS_REPL_MAX 4
     * }
     */
    public static int _POSIX_SS_REPL_MAX() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SYMLINK_MAX 255
     * }
     */
    public static int _POSIX_SYMLINK_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SYMLOOP_MAX 8
     * }
     */
    public static int _POSIX_SYMLOOP_MAX() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define _POSIX_TRACE_EVENT_NAME_MAX 30
     * }
     */
    public static int _POSIX_TRACE_EVENT_NAME_MAX() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * #define _POSIX_TRACE_NAME_MAX 8
     * }
     */
    public static int _POSIX_TRACE_NAME_MAX() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define _POSIX_TRACE_SYS_MAX 8
     * }
     */
    public static int _POSIX_TRACE_SYS_MAX() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define _POSIX_TRACE_USER_EVENT_MAX 32
     * }
     */
    public static int _POSIX_TRACE_USER_EVENT_MAX() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define _POSIX_TTY_NAME_MAX 9
     * }
     */
    public static int _POSIX_TTY_NAME_MAX() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_CHARCLASS_NAME_MAX 14
     * }
     */
    public static int _POSIX2_CHARCLASS_NAME_MAX() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_COLL_WEIGHTS_MAX 2
     * }
     */
    public static int _POSIX2_COLL_WEIGHTS_MAX() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define PASS_MAX 128
     * }
     */
    public static int PASS_MAX() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define NL_ARGMAX 9
     * }
     */
    public static int NL_ARGMAX() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define NL_LANGMAX 14
     * }
     */
    public static int NL_LANGMAX() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define NL_MSGMAX 32767
     * }
     */
    public static int NL_MSGMAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define NL_NMAX 1
     * }
     */
    public static int NL_NMAX() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define NL_SETMAX 255
     * }
     */
    public static int NL_SETMAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define NL_TEXTMAX 2048
     * }
     */
    public static int NL_TEXTMAX() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define _XOPEN_IOV_MAX 16
     * }
     */
    public static int _XOPEN_IOV_MAX() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define IOV_MAX 1024
     * }
     */
    public static int IOV_MAX() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define _XOPEN_NAME_MAX 255
     * }
     */
    public static int _XOPEN_NAME_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define _XOPEN_PATH_MAX 1024
     * }
     */
    public static int _XOPEN_PATH_MAX() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define ZSTD_VERSION_MAJOR 1
     * }
     */
    public static int ZSTD_VERSION_MAJOR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define ZSTD_VERSION_MINOR 5
     * }
     */
    public static int ZSTD_VERSION_MINOR() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define ZSTD_VERSION_RELEASE 5
     * }
     */
    public static int ZSTD_VERSION_RELEASE() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define ZSTD_CLEVEL_DEFAULT 3
     * }
     */
    public static int ZSTD_CLEVEL_DEFAULT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define ZSTD_MAGIC_SKIPPABLE_START 407710288
     * }
     */
    public static int ZSTD_MAGIC_SKIPPABLE_START() {
        return (int)407710288L;
    }
    /**
     * {@snippet :
     * #define ZSTD_BLOCKSIZELOG_MAX 17
     * }
     */
    public static int ZSTD_BLOCKSIZELOG_MAX() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * typedef long ptrdiff_t;
     * }
     */
    public static final OfLong ptrdiff_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long size_t;
     * }
     */
    public static final OfLong size_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long rsize_t;
     * }
     */
    public static final OfLong rsize_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int wchar_t;
     * }
     */
    public static final OfInt wchar_t = JAVA_INT;
    public static MethodHandle ZSTD_versionNumber$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$1,"ZSTD_versionNumber");
    }
    /**
     * {@snippet :
     * unsigned int ZSTD_versionNumber();
     * }
     */
    public static int ZSTD_versionNumber() {
        var mh$ = ZSTD_versionNumber$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_versionString$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$3,"ZSTD_versionString");
    }
    /**
     * {@snippet :
     * char* ZSTD_versionString();
     * }
     */
    public static MemorySegment ZSTD_versionString() {
        var mh$ = ZSTD_versionString$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_compress$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$5,"ZSTD_compress");
    }
    /**
     * {@snippet :
     * size_t ZSTD_compress(void* dst, size_t dstCapacity, void* src, size_t srcSize, int compressionLevel);
     * }
     */
    public static long ZSTD_compress(MemorySegment dst, long dstCapacity, MemorySegment src, long srcSize, int compressionLevel) {
        var mh$ = ZSTD_compress$MH();
        try {
            return (long)mh$.invokeExact(dst, dstCapacity, src, srcSize, compressionLevel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_decompress$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$1,"ZSTD_decompress");
    }
    /**
     * {@snippet :
     * size_t ZSTD_decompress(void* dst, size_t dstCapacity, void* src, size_t compressedSize);
     * }
     */
    public static long ZSTD_decompress(MemorySegment dst, long dstCapacity, MemorySegment src, long compressedSize) {
        var mh$ = ZSTD_decompress$MH();
        try {
            return (long)mh$.invokeExact(dst, dstCapacity, src, compressedSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_getFrameContentSize$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$3,"ZSTD_getFrameContentSize");
    }
    /**
     * {@snippet :
     * unsigned long long ZSTD_getFrameContentSize(void* src, size_t srcSize);
     * }
     */
    public static long ZSTD_getFrameContentSize(MemorySegment src, long srcSize) {
        var mh$ = ZSTD_getFrameContentSize$MH();
        try {
            return (long)mh$.invokeExact(src, srcSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_getDecompressedSize$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$4,"ZSTD_getDecompressedSize");
    }
    /**
     * {@snippet :
     * unsigned long long ZSTD_getDecompressedSize(void* src, size_t srcSize);
     * }
     */
    public static long ZSTD_getDecompressedSize(MemorySegment src, long srcSize) {
        var mh$ = ZSTD_getDecompressedSize$MH();
        try {
            return (long)mh$.invokeExact(src, srcSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_findFrameCompressedSize$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$5,"ZSTD_findFrameCompressedSize");
    }
    /**
     * {@snippet :
     * size_t ZSTD_findFrameCompressedSize(void* src, size_t srcSize);
     * }
     */
    public static long ZSTD_findFrameCompressedSize(MemorySegment src, long srcSize) {
        var mh$ = ZSTD_findFrameCompressedSize$MH();
        try {
            return (long)mh$.invokeExact(src, srcSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_compressBound$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$1,"ZSTD_compressBound");
    }
    /**
     * {@snippet :
     * size_t ZSTD_compressBound(size_t srcSize);
     * }
     */
    public static long ZSTD_compressBound(long srcSize) {
        var mh$ = ZSTD_compressBound$MH();
        try {
            return (long)mh$.invokeExact(srcSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_isError$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$3,"ZSTD_isError");
    }
    /**
     * {@snippet :
     * unsigned int ZSTD_isError(size_t code);
     * }
     */
    public static int ZSTD_isError(long code) {
        var mh$ = ZSTD_isError$MH();
        try {
            return (int)mh$.invokeExact(code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_getErrorName$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$5,"ZSTD_getErrorName");
    }
    /**
     * {@snippet :
     * char* ZSTD_getErrorName(size_t code);
     * }
     */
    public static MemorySegment ZSTD_getErrorName(long code) {
        var mh$ = ZSTD_getErrorName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_minCLevel$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$0,"ZSTD_minCLevel");
    }
    /**
     * {@snippet :
     * int ZSTD_minCLevel();
     * }
     */
    public static int ZSTD_minCLevel() {
        var mh$ = ZSTD_minCLevel$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_maxCLevel$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$1,"ZSTD_maxCLevel");
    }
    /**
     * {@snippet :
     * int ZSTD_maxCLevel();
     * }
     */
    public static int ZSTD_maxCLevel() {
        var mh$ = ZSTD_maxCLevel$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_defaultCLevel$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$2,"ZSTD_defaultCLevel");
    }
    /**
     * {@snippet :
     * int ZSTD_defaultCLevel();
     * }
     */
    public static int ZSTD_defaultCLevel() {
        var mh$ = ZSTD_defaultCLevel$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_createCCtx$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$3,"ZSTD_createCCtx");
    }
    /**
     * {@snippet :
     * ZSTD_CCtx* ZSTD_createCCtx();
     * }
     */
    public static MemorySegment ZSTD_createCCtx() {
        var mh$ = ZSTD_createCCtx$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_freeCCtx$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$5,"ZSTD_freeCCtx");
    }
    /**
     * {@snippet :
     * size_t ZSTD_freeCCtx(ZSTD_CCtx* cctx);
     * }
     */
    public static long ZSTD_freeCCtx(MemorySegment cctx) {
        var mh$ = ZSTD_freeCCtx$MH();
        try {
            return (long)mh$.invokeExact(cctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_compressCCtx$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$1,"ZSTD_compressCCtx");
    }
    /**
     * {@snippet :
     * size_t ZSTD_compressCCtx(ZSTD_CCtx* cctx, void* dst, size_t dstCapacity, void* src, size_t srcSize, int compressionLevel);
     * }
     */
    public static long ZSTD_compressCCtx(MemorySegment cctx, MemorySegment dst, long dstCapacity, MemorySegment src, long srcSize, int compressionLevel) {
        var mh$ = ZSTD_compressCCtx$MH();
        try {
            return (long)mh$.invokeExact(cctx, dst, dstCapacity, src, srcSize, compressionLevel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_createDCtx$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$2,"ZSTD_createDCtx");
    }
    /**
     * {@snippet :
     * ZSTD_DCtx* ZSTD_createDCtx();
     * }
     */
    public static MemorySegment ZSTD_createDCtx() {
        var mh$ = ZSTD_createDCtx$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_freeDCtx$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$3,"ZSTD_freeDCtx");
    }
    /**
     * {@snippet :
     * size_t ZSTD_freeDCtx(ZSTD_DCtx* dctx);
     * }
     */
    public static long ZSTD_freeDCtx(MemorySegment dctx) {
        var mh$ = ZSTD_freeDCtx$MH();
        try {
            return (long)mh$.invokeExact(dctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_decompressDCtx$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$5,"ZSTD_decompressDCtx");
    }
    /**
     * {@snippet :
     * size_t ZSTD_decompressDCtx(ZSTD_DCtx* dctx, void* dst, size_t dstCapacity, void* src, size_t srcSize);
     * }
     */
    public static long ZSTD_decompressDCtx(MemorySegment dctx, MemorySegment dst, long dstCapacity, MemorySegment src, long srcSize) {
        var mh$ = ZSTD_decompressDCtx$MH();
        try {
            return (long)mh$.invokeExact(dctx, dst, dstCapacity, src, srcSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .ZSTD_fast = 1;
     * }
     */
    public static int ZSTD_fast() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_dfast = 2;
     * }
     */
    public static int ZSTD_dfast() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_greedy = 3;
     * }
     */
    public static int ZSTD_greedy() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_lazy = 4;
     * }
     */
    public static int ZSTD_lazy() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_lazy2 = 5;
     * }
     */
    public static int ZSTD_lazy2() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_btlazy2 = 6;
     * }
     */
    public static int ZSTD_btlazy2() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_btopt = 7;
     * }
     */
    public static int ZSTD_btopt() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_btultra = 8;
     * }
     */
    public static int ZSTD_btultra() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_btultra2 = 9;
     * }
     */
    public static int ZSTD_btultra2() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_compressionLevel = 100;
     * }
     */
    public static int ZSTD_c_compressionLevel() {
        return (int)100L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_windowLog = 101;
     * }
     */
    public static int ZSTD_c_windowLog() {
        return (int)101L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_hashLog = 102;
     * }
     */
    public static int ZSTD_c_hashLog() {
        return (int)102L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_chainLog = 103;
     * }
     */
    public static int ZSTD_c_chainLog() {
        return (int)103L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_searchLog = 104;
     * }
     */
    public static int ZSTD_c_searchLog() {
        return (int)104L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_minMatch = 105;
     * }
     */
    public static int ZSTD_c_minMatch() {
        return (int)105L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_targetLength = 106;
     * }
     */
    public static int ZSTD_c_targetLength() {
        return (int)106L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_strategy = 107;
     * }
     */
    public static int ZSTD_c_strategy() {
        return (int)107L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_enableLongDistanceMatching = 160;
     * }
     */
    public static int ZSTD_c_enableLongDistanceMatching() {
        return (int)160L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_ldmHashLog = 161;
     * }
     */
    public static int ZSTD_c_ldmHashLog() {
        return (int)161L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_ldmMinMatch = 162;
     * }
     */
    public static int ZSTD_c_ldmMinMatch() {
        return (int)162L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_ldmBucketSizeLog = 163;
     * }
     */
    public static int ZSTD_c_ldmBucketSizeLog() {
        return (int)163L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_ldmHashRateLog = 164;
     * }
     */
    public static int ZSTD_c_ldmHashRateLog() {
        return (int)164L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_contentSizeFlag = 200;
     * }
     */
    public static int ZSTD_c_contentSizeFlag() {
        return (int)200L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_checksumFlag = 201;
     * }
     */
    public static int ZSTD_c_checksumFlag() {
        return (int)201L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_dictIDFlag = 202;
     * }
     */
    public static int ZSTD_c_dictIDFlag() {
        return (int)202L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_nbWorkers = 400;
     * }
     */
    public static int ZSTD_c_nbWorkers() {
        return (int)400L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_jobSize = 401;
     * }
     */
    public static int ZSTD_c_jobSize() {
        return (int)401L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_overlapLog = 402;
     * }
     */
    public static int ZSTD_c_overlapLog() {
        return (int)402L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_experimentalParam1 = 500;
     * }
     */
    public static int ZSTD_c_experimentalParam1() {
        return (int)500L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_experimentalParam2 = 10;
     * }
     */
    public static int ZSTD_c_experimentalParam2() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_experimentalParam3 = 1000;
     * }
     */
    public static int ZSTD_c_experimentalParam3() {
        return (int)1000L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_experimentalParam4 = 1001;
     * }
     */
    public static int ZSTD_c_experimentalParam4() {
        return (int)1001L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_experimentalParam5 = 1002;
     * }
     */
    public static int ZSTD_c_experimentalParam5() {
        return (int)1002L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_experimentalParam6 = 1003;
     * }
     */
    public static int ZSTD_c_experimentalParam6() {
        return (int)1003L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_experimentalParam7 = 1004;
     * }
     */
    public static int ZSTD_c_experimentalParam7() {
        return (int)1004L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_experimentalParam8 = 1005;
     * }
     */
    public static int ZSTD_c_experimentalParam8() {
        return (int)1005L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_experimentalParam9 = 1006;
     * }
     */
    public static int ZSTD_c_experimentalParam9() {
        return (int)1006L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_experimentalParam10 = 1007;
     * }
     */
    public static int ZSTD_c_experimentalParam10() {
        return (int)1007L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_experimentalParam11 = 1008;
     * }
     */
    public static int ZSTD_c_experimentalParam11() {
        return (int)1008L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_experimentalParam12 = 1009;
     * }
     */
    public static int ZSTD_c_experimentalParam12() {
        return (int)1009L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_experimentalParam13 = 1010;
     * }
     */
    public static int ZSTD_c_experimentalParam13() {
        return (int)1010L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_experimentalParam14 = 1011;
     * }
     */
    public static int ZSTD_c_experimentalParam14() {
        return (int)1011L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_experimentalParam15 = 1012;
     * }
     */
    public static int ZSTD_c_experimentalParam15() {
        return (int)1012L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_experimentalParam16 = 1013;
     * }
     */
    public static int ZSTD_c_experimentalParam16() {
        return (int)1013L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_experimentalParam17 = 1014;
     * }
     */
    public static int ZSTD_c_experimentalParam17() {
        return (int)1014L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_experimentalParam18 = 1015;
     * }
     */
    public static int ZSTD_c_experimentalParam18() {
        return (int)1015L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_c_experimentalParam19 = 1016;
     * }
     */
    public static int ZSTD_c_experimentalParam19() {
        return (int)1016L;
    }
    public static MethodHandle ZSTD_cParam_getBounds$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$5,"ZSTD_cParam_getBounds");
    }
    /**
     * {@snippet :
     * ZSTD_bounds ZSTD_cParam_getBounds(ZSTD_cParameter cParam);
     * }
     */
    public static MemorySegment ZSTD_cParam_getBounds(SegmentAllocator allocator, int cParam) {
        var mh$ = ZSTD_cParam_getBounds$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, cParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_CCtx_setParameter$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$1,"ZSTD_CCtx_setParameter");
    }
    /**
     * {@snippet :
     * size_t ZSTD_CCtx_setParameter(ZSTD_CCtx* cctx, ZSTD_cParameter param, int value);
     * }
     */
    public static long ZSTD_CCtx_setParameter(MemorySegment cctx, int param, int value) {
        var mh$ = ZSTD_CCtx_setParameter$MH();
        try {
            return (long)mh$.invokeExact(cctx, param, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_CCtx_setPledgedSrcSize$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$2,"ZSTD_CCtx_setPledgedSrcSize");
    }
    /**
     * {@snippet :
     * size_t ZSTD_CCtx_setPledgedSrcSize(ZSTD_CCtx* cctx, unsigned long long pledgedSrcSize);
     * }
     */
    public static long ZSTD_CCtx_setPledgedSrcSize(MemorySegment cctx, long pledgedSrcSize) {
        var mh$ = ZSTD_CCtx_setPledgedSrcSize$MH();
        try {
            return (long)mh$.invokeExact(cctx, pledgedSrcSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .ZSTD_reset_session_only = 1;
     * }
     */
    public static int ZSTD_reset_session_only() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_reset_parameters = 2;
     * }
     */
    public static int ZSTD_reset_parameters() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_reset_session_and_parameters = 3;
     * }
     */
    public static int ZSTD_reset_session_and_parameters() {
        return (int)3L;
    }
    public static MethodHandle ZSTD_CCtx_reset$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$4,"ZSTD_CCtx_reset");
    }
    /**
     * {@snippet :
     * size_t ZSTD_CCtx_reset(ZSTD_CCtx* cctx, ZSTD_ResetDirective reset);
     * }
     */
    public static long ZSTD_CCtx_reset(MemorySegment cctx, int reset) {
        var mh$ = ZSTD_CCtx_reset$MH();
        try {
            return (long)mh$.invokeExact(cctx, reset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_compress2$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$5,"ZSTD_compress2");
    }
    /**
     * {@snippet :
     * size_t ZSTD_compress2(ZSTD_CCtx* cctx, void* dst, size_t dstCapacity, void* src, size_t srcSize);
     * }
     */
    public static long ZSTD_compress2(MemorySegment cctx, MemorySegment dst, long dstCapacity, MemorySegment src, long srcSize) {
        var mh$ = ZSTD_compress2$MH();
        try {
            return (long)mh$.invokeExact(cctx, dst, dstCapacity, src, srcSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .ZSTD_d_windowLogMax = 100;
     * }
     */
    public static int ZSTD_d_windowLogMax() {
        return (int)100L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_d_experimentalParam1 = 1000;
     * }
     */
    public static int ZSTD_d_experimentalParam1() {
        return (int)1000L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_d_experimentalParam2 = 1001;
     * }
     */
    public static int ZSTD_d_experimentalParam2() {
        return (int)1001L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_d_experimentalParam3 = 1002;
     * }
     */
    public static int ZSTD_d_experimentalParam3() {
        return (int)1002L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_d_experimentalParam4 = 1003;
     * }
     */
    public static int ZSTD_d_experimentalParam4() {
        return (int)1003L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_d_experimentalParam5 = 1004;
     * }
     */
    public static int ZSTD_d_experimentalParam5() {
        return (int)1004L;
    }
    public static MethodHandle ZSTD_dParam_getBounds$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$0,"ZSTD_dParam_getBounds");
    }
    /**
     * {@snippet :
     * ZSTD_bounds ZSTD_dParam_getBounds(ZSTD_dParameter dParam);
     * }
     */
    public static MemorySegment ZSTD_dParam_getBounds(SegmentAllocator allocator, int dParam) {
        var mh$ = ZSTD_dParam_getBounds$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, dParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_DCtx_setParameter$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$1,"ZSTD_DCtx_setParameter");
    }
    /**
     * {@snippet :
     * size_t ZSTD_DCtx_setParameter(ZSTD_DCtx* dctx, ZSTD_dParameter param, int value);
     * }
     */
    public static long ZSTD_DCtx_setParameter(MemorySegment dctx, int param, int value) {
        var mh$ = ZSTD_DCtx_setParameter$MH();
        try {
            return (long)mh$.invokeExact(dctx, param, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_DCtx_reset$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$2,"ZSTD_DCtx_reset");
    }
    /**
     * {@snippet :
     * size_t ZSTD_DCtx_reset(ZSTD_DCtx* dctx, ZSTD_ResetDirective reset);
     * }
     */
    public static long ZSTD_DCtx_reset(MemorySegment dctx, int reset) {
        var mh$ = ZSTD_DCtx_reset$MH();
        try {
            return (long)mh$.invokeExact(dctx, reset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_createCStream$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$5,"ZSTD_createCStream");
    }
    /**
     * {@snippet :
     * ZSTD_CStream* ZSTD_createCStream();
     * }
     */
    public static MemorySegment ZSTD_createCStream() {
        var mh$ = ZSTD_createCStream$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_freeCStream$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$0,"ZSTD_freeCStream");
    }
    /**
     * {@snippet :
     * size_t ZSTD_freeCStream(ZSTD_CStream* zcs);
     * }
     */
    public static long ZSTD_freeCStream(MemorySegment zcs) {
        var mh$ = ZSTD_freeCStream$MH();
        try {
            return (long)mh$.invokeExact(zcs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .ZSTD_e_continue = 0;
     * }
     */
    public static int ZSTD_e_continue() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_e_flush = 1;
     * }
     */
    public static int ZSTD_e_flush() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_e_end = 2;
     * }
     */
    public static int ZSTD_e_end() {
        return (int)2L;
    }
    public static MethodHandle ZSTD_compressStream2$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$2,"ZSTD_compressStream2");
    }
    /**
     * {@snippet :
     * size_t ZSTD_compressStream2(ZSTD_CCtx* cctx, ZSTD_outBuffer* output, ZSTD_inBuffer* input, ZSTD_EndDirective endOp);
     * }
     */
    public static long ZSTD_compressStream2(MemorySegment cctx, MemorySegment output, MemorySegment input, int endOp) {
        var mh$ = ZSTD_compressStream2$MH();
        try {
            return (long)mh$.invokeExact(cctx, output, input, endOp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_CStreamInSize$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$4,"ZSTD_CStreamInSize");
    }
    /**
     * {@snippet :
     * size_t ZSTD_CStreamInSize();
     * }
     */
    public static long ZSTD_CStreamInSize() {
        var mh$ = ZSTD_CStreamInSize$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_CStreamOutSize$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$5,"ZSTD_CStreamOutSize");
    }
    /**
     * {@snippet :
     * size_t ZSTD_CStreamOutSize();
     * }
     */
    public static long ZSTD_CStreamOutSize() {
        var mh$ = ZSTD_CStreamOutSize$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_initCStream$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$0,"ZSTD_initCStream");
    }
    /**
     * {@snippet :
     * size_t ZSTD_initCStream(ZSTD_CStream* zcs, int compressionLevel);
     * }
     */
    public static long ZSTD_initCStream(MemorySegment zcs, int compressionLevel) {
        var mh$ = ZSTD_initCStream$MH();
        try {
            return (long)mh$.invokeExact(zcs, compressionLevel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_compressStream$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$2,"ZSTD_compressStream");
    }
    /**
     * {@snippet :
     * size_t ZSTD_compressStream(ZSTD_CStream* zcs, ZSTD_outBuffer* output, ZSTD_inBuffer* input);
     * }
     */
    public static long ZSTD_compressStream(MemorySegment zcs, MemorySegment output, MemorySegment input) {
        var mh$ = ZSTD_compressStream$MH();
        try {
            return (long)mh$.invokeExact(zcs, output, input);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_flushStream$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$4,"ZSTD_flushStream");
    }
    /**
     * {@snippet :
     * size_t ZSTD_flushStream(ZSTD_CStream* zcs, ZSTD_outBuffer* output);
     * }
     */
    public static long ZSTD_flushStream(MemorySegment zcs, MemorySegment output) {
        var mh$ = ZSTD_flushStream$MH();
        try {
            return (long)mh$.invokeExact(zcs, output);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_endStream$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$5,"ZSTD_endStream");
    }
    /**
     * {@snippet :
     * size_t ZSTD_endStream(ZSTD_CStream* zcs, ZSTD_outBuffer* output);
     * }
     */
    public static long ZSTD_endStream(MemorySegment zcs, MemorySegment output) {
        var mh$ = ZSTD_endStream$MH();
        try {
            return (long)mh$.invokeExact(zcs, output);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_createDStream$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$0,"ZSTD_createDStream");
    }
    /**
     * {@snippet :
     * ZSTD_DStream* ZSTD_createDStream();
     * }
     */
    public static MemorySegment ZSTD_createDStream() {
        var mh$ = ZSTD_createDStream$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_freeDStream$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$1,"ZSTD_freeDStream");
    }
    /**
     * {@snippet :
     * size_t ZSTD_freeDStream(ZSTD_DStream* zds);
     * }
     */
    public static long ZSTD_freeDStream(MemorySegment zds) {
        var mh$ = ZSTD_freeDStream$MH();
        try {
            return (long)mh$.invokeExact(zds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_initDStream$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$2,"ZSTD_initDStream");
    }
    /**
     * {@snippet :
     * size_t ZSTD_initDStream(ZSTD_DStream* zds);
     * }
     */
    public static long ZSTD_initDStream(MemorySegment zds) {
        var mh$ = ZSTD_initDStream$MH();
        try {
            return (long)mh$.invokeExact(zds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_decompressStream$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$3,"ZSTD_decompressStream");
    }
    /**
     * {@snippet :
     * size_t ZSTD_decompressStream(ZSTD_DStream* zds, ZSTD_outBuffer* output, ZSTD_inBuffer* input);
     * }
     */
    public static long ZSTD_decompressStream(MemorySegment zds, MemorySegment output, MemorySegment input) {
        var mh$ = ZSTD_decompressStream$MH();
        try {
            return (long)mh$.invokeExact(zds, output, input);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_DStreamInSize$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$4,"ZSTD_DStreamInSize");
    }
    /**
     * {@snippet :
     * size_t ZSTD_DStreamInSize();
     * }
     */
    public static long ZSTD_DStreamInSize() {
        var mh$ = ZSTD_DStreamInSize$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_DStreamOutSize$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$5,"ZSTD_DStreamOutSize");
    }
    /**
     * {@snippet :
     * size_t ZSTD_DStreamOutSize();
     * }
     */
    public static long ZSTD_DStreamOutSize() {
        var mh$ = ZSTD_DStreamOutSize$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_compress_usingDict$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$1,"ZSTD_compress_usingDict");
    }
    /**
     * {@snippet :
     * size_t ZSTD_compress_usingDict(ZSTD_CCtx* ctx, void* dst, size_t dstCapacity, void* src, size_t srcSize, void* dict, size_t dictSize, int compressionLevel);
     * }
     */
    public static long ZSTD_compress_usingDict(MemorySegment ctx, MemorySegment dst, long dstCapacity, MemorySegment src, long srcSize, MemorySegment dict, long dictSize, int compressionLevel) {
        var mh$ = ZSTD_compress_usingDict$MH();
        try {
            return (long)mh$.invokeExact(ctx, dst, dstCapacity, src, srcSize, dict, dictSize, compressionLevel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_decompress_usingDict$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$3,"ZSTD_decompress_usingDict");
    }
    /**
     * {@snippet :
     * size_t ZSTD_decompress_usingDict(ZSTD_DCtx* dctx, void* dst, size_t dstCapacity, void* src, size_t srcSize, void* dict, size_t dictSize);
     * }
     */
    public static long ZSTD_decompress_usingDict(MemorySegment dctx, MemorySegment dst, long dstCapacity, MemorySegment src, long srcSize, MemorySegment dict, long dictSize) {
        var mh$ = ZSTD_decompress_usingDict$MH();
        try {
            return (long)mh$.invokeExact(dctx, dst, dstCapacity, src, srcSize, dict, dictSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_createCDict$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$5,"ZSTD_createCDict");
    }
    /**
     * {@snippet :
     * ZSTD_CDict* ZSTD_createCDict(void* dictBuffer, size_t dictSize, int compressionLevel);
     * }
     */
    public static MemorySegment ZSTD_createCDict(MemorySegment dictBuffer, long dictSize, int compressionLevel) {
        var mh$ = ZSTD_createCDict$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dictBuffer, dictSize, compressionLevel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_freeCDict$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$0,"ZSTD_freeCDict");
    }
    /**
     * {@snippet :
     * size_t ZSTD_freeCDict(ZSTD_CDict* CDict);
     * }
     */
    public static long ZSTD_freeCDict(MemorySegment CDict) {
        var mh$ = ZSTD_freeCDict$MH();
        try {
            return (long)mh$.invokeExact(CDict);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_compress_usingCDict$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$2,"ZSTD_compress_usingCDict");
    }
    /**
     * {@snippet :
     * size_t ZSTD_compress_usingCDict(ZSTD_CCtx* cctx, void* dst, size_t dstCapacity, void* src, size_t srcSize, const ZSTD_CDict* cdict);
     * }
     */
    public static long ZSTD_compress_usingCDict(MemorySegment cctx, MemorySegment dst, long dstCapacity, MemorySegment src, long srcSize, MemorySegment cdict) {
        var mh$ = ZSTD_compress_usingCDict$MH();
        try {
            return (long)mh$.invokeExact(cctx, dst, dstCapacity, src, srcSize, cdict);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_createDDict$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$4,"ZSTD_createDDict");
    }
    /**
     * {@snippet :
     * ZSTD_DDict* ZSTD_createDDict(void* dictBuffer, size_t dictSize);
     * }
     */
    public static MemorySegment ZSTD_createDDict(MemorySegment dictBuffer, long dictSize) {
        var mh$ = ZSTD_createDDict$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dictBuffer, dictSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_freeDDict$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$5,"ZSTD_freeDDict");
    }
    /**
     * {@snippet :
     * size_t ZSTD_freeDDict(ZSTD_DDict* ddict);
     * }
     */
    public static long ZSTD_freeDDict(MemorySegment ddict) {
        var mh$ = ZSTD_freeDDict$MH();
        try {
            return (long)mh$.invokeExact(ddict);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_decompress_usingDDict$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$0,"ZSTD_decompress_usingDDict");
    }
    /**
     * {@snippet :
     * size_t ZSTD_decompress_usingDDict(ZSTD_DCtx* dctx, void* dst, size_t dstCapacity, void* src, size_t srcSize, const ZSTD_DDict* ddict);
     * }
     */
    public static long ZSTD_decompress_usingDDict(MemorySegment dctx, MemorySegment dst, long dstCapacity, MemorySegment src, long srcSize, MemorySegment ddict) {
        var mh$ = ZSTD_decompress_usingDDict$MH();
        try {
            return (long)mh$.invokeExact(dctx, dst, dstCapacity, src, srcSize, ddict);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_getDictID_fromDict$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$2,"ZSTD_getDictID_fromDict");
    }
    /**
     * {@snippet :
     * unsigned int ZSTD_getDictID_fromDict(void* dict, size_t dictSize);
     * }
     */
    public static int ZSTD_getDictID_fromDict(MemorySegment dict, long dictSize) {
        var mh$ = ZSTD_getDictID_fromDict$MH();
        try {
            return (int)mh$.invokeExact(dict, dictSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_getDictID_fromCDict$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$4,"ZSTD_getDictID_fromCDict");
    }
    /**
     * {@snippet :
     * unsigned int ZSTD_getDictID_fromCDict(const ZSTD_CDict* cdict);
     * }
     */
    public static int ZSTD_getDictID_fromCDict(MemorySegment cdict) {
        var mh$ = ZSTD_getDictID_fromCDict$MH();
        try {
            return (int)mh$.invokeExact(cdict);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_getDictID_fromDDict$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$5,"ZSTD_getDictID_fromDDict");
    }
    /**
     * {@snippet :
     * unsigned int ZSTD_getDictID_fromDDict(const ZSTD_DDict* ddict);
     * }
     */
    public static int ZSTD_getDictID_fromDDict(MemorySegment ddict) {
        var mh$ = ZSTD_getDictID_fromDDict$MH();
        try {
            return (int)mh$.invokeExact(ddict);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_getDictID_fromFrame$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$0,"ZSTD_getDictID_fromFrame");
    }
    /**
     * {@snippet :
     * unsigned int ZSTD_getDictID_fromFrame(void* src, size_t srcSize);
     * }
     */
    public static int ZSTD_getDictID_fromFrame(MemorySegment src, long srcSize) {
        var mh$ = ZSTD_getDictID_fromFrame$MH();
        try {
            return (int)mh$.invokeExact(src, srcSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_CCtx_loadDictionary$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$2,"ZSTD_CCtx_loadDictionary");
    }
    /**
     * {@snippet :
     * size_t ZSTD_CCtx_loadDictionary(ZSTD_CCtx* cctx, void* dict, size_t dictSize);
     * }
     */
    public static long ZSTD_CCtx_loadDictionary(MemorySegment cctx, MemorySegment dict, long dictSize) {
        var mh$ = ZSTD_CCtx_loadDictionary$MH();
        try {
            return (long)mh$.invokeExact(cctx, dict, dictSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_CCtx_refCDict$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$3,"ZSTD_CCtx_refCDict");
    }
    /**
     * {@snippet :
     * size_t ZSTD_CCtx_refCDict(ZSTD_CCtx* cctx, const ZSTD_CDict* cdict);
     * }
     */
    public static long ZSTD_CCtx_refCDict(MemorySegment cctx, MemorySegment cdict) {
        var mh$ = ZSTD_CCtx_refCDict$MH();
        try {
            return (long)mh$.invokeExact(cctx, cdict);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_CCtx_refPrefix$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$4,"ZSTD_CCtx_refPrefix");
    }
    /**
     * {@snippet :
     * size_t ZSTD_CCtx_refPrefix(ZSTD_CCtx* cctx, void* prefix, size_t prefixSize);
     * }
     */
    public static long ZSTD_CCtx_refPrefix(MemorySegment cctx, MemorySegment prefix, long prefixSize) {
        var mh$ = ZSTD_CCtx_refPrefix$MH();
        try {
            return (long)mh$.invokeExact(cctx, prefix, prefixSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_DCtx_loadDictionary$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$5,"ZSTD_DCtx_loadDictionary");
    }
    /**
     * {@snippet :
     * size_t ZSTD_DCtx_loadDictionary(ZSTD_DCtx* dctx, void* dict, size_t dictSize);
     * }
     */
    public static long ZSTD_DCtx_loadDictionary(MemorySegment dctx, MemorySegment dict, long dictSize) {
        var mh$ = ZSTD_DCtx_loadDictionary$MH();
        try {
            return (long)mh$.invokeExact(dctx, dict, dictSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_DCtx_refDDict$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$0,"ZSTD_DCtx_refDDict");
    }
    /**
     * {@snippet :
     * size_t ZSTD_DCtx_refDDict(ZSTD_DCtx* dctx, const ZSTD_DDict* ddict);
     * }
     */
    public static long ZSTD_DCtx_refDDict(MemorySegment dctx, MemorySegment ddict) {
        var mh$ = ZSTD_DCtx_refDDict$MH();
        try {
            return (long)mh$.invokeExact(dctx, ddict);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_DCtx_refPrefix$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$1,"ZSTD_DCtx_refPrefix");
    }
    /**
     * {@snippet :
     * size_t ZSTD_DCtx_refPrefix(ZSTD_DCtx* dctx, void* prefix, size_t prefixSize);
     * }
     */
    public static long ZSTD_DCtx_refPrefix(MemorySegment dctx, MemorySegment prefix, long prefixSize) {
        var mh$ = ZSTD_DCtx_refPrefix$MH();
        try {
            return (long)mh$.invokeExact(dctx, prefix, prefixSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_sizeof_CCtx$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$2,"ZSTD_sizeof_CCtx");
    }
    /**
     * {@snippet :
     * size_t ZSTD_sizeof_CCtx(const ZSTD_CCtx* cctx);
     * }
     */
    public static long ZSTD_sizeof_CCtx(MemorySegment cctx) {
        var mh$ = ZSTD_sizeof_CCtx$MH();
        try {
            return (long)mh$.invokeExact(cctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_sizeof_DCtx$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$3,"ZSTD_sizeof_DCtx");
    }
    /**
     * {@snippet :
     * size_t ZSTD_sizeof_DCtx(const ZSTD_DCtx* dctx);
     * }
     */
    public static long ZSTD_sizeof_DCtx(MemorySegment dctx) {
        var mh$ = ZSTD_sizeof_DCtx$MH();
        try {
            return (long)mh$.invokeExact(dctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_sizeof_CStream$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$4,"ZSTD_sizeof_CStream");
    }
    /**
     * {@snippet :
     * size_t ZSTD_sizeof_CStream(const ZSTD_CStream* zcs);
     * }
     */
    public static long ZSTD_sizeof_CStream(MemorySegment zcs) {
        var mh$ = ZSTD_sizeof_CStream$MH();
        try {
            return (long)mh$.invokeExact(zcs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_sizeof_DStream$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$5,"ZSTD_sizeof_DStream");
    }
    /**
     * {@snippet :
     * size_t ZSTD_sizeof_DStream(const ZSTD_DStream* zds);
     * }
     */
    public static long ZSTD_sizeof_DStream(MemorySegment zds) {
        var mh$ = ZSTD_sizeof_DStream$MH();
        try {
            return (long)mh$.invokeExact(zds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_sizeof_CDict$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$0,"ZSTD_sizeof_CDict");
    }
    /**
     * {@snippet :
     * size_t ZSTD_sizeof_CDict(const ZSTD_CDict* cdict);
     * }
     */
    public static long ZSTD_sizeof_CDict(MemorySegment cdict) {
        var mh$ = ZSTD_sizeof_CDict$MH();
        try {
            return (long)mh$.invokeExact(cdict);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_sizeof_DDict$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$1,"ZSTD_sizeof_DDict");
    }
    /**
     * {@snippet :
     * size_t ZSTD_sizeof_DDict(const ZSTD_DDict* ddict);
     * }
     */
    public static long ZSTD_sizeof_DDict(MemorySegment ddict) {
        var mh$ = ZSTD_sizeof_DDict$MH();
        try {
            return (long)mh$.invokeExact(ddict);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZDICT_trainFromBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$3,"ZDICT_trainFromBuffer");
    }
    /**
     * {@snippet :
     * size_t ZDICT_trainFromBuffer(void* dictBuffer, size_t dictBufferCapacity, void* samplesBuffer, const size_t* samplesSizes, unsigned int nbSamples);
     * }
     */
    public static long ZDICT_trainFromBuffer(MemorySegment dictBuffer, long dictBufferCapacity, MemorySegment samplesBuffer, MemorySegment samplesSizes, int nbSamples) {
        var mh$ = ZDICT_trainFromBuffer$MH();
        try {
            return (long)mh$.invokeExact(dictBuffer, dictBufferCapacity, samplesBuffer, samplesSizes, nbSamples);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZDICT_finalizeDictionary$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$3,"ZDICT_finalizeDictionary");
    }
    /**
     * {@snippet :
     * size_t ZDICT_finalizeDictionary(void* dstDictBuffer, size_t maxDictSize, void* dictContent, size_t dictContentSize, void* samplesBuffer, const size_t* samplesSizes, unsigned int nbSamples, ZDICT_params_t parameters);
     * }
     */
    public static long ZDICT_finalizeDictionary(MemorySegment dstDictBuffer, long maxDictSize, MemorySegment dictContent, long dictContentSize, MemorySegment samplesBuffer, MemorySegment samplesSizes, int nbSamples, MemorySegment parameters) {
        var mh$ = ZDICT_finalizeDictionary$MH();
        try {
            return (long)mh$.invokeExact(dstDictBuffer, maxDictSize, dictContent, dictContentSize, samplesBuffer, samplesSizes, nbSamples, parameters);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZDICT_getDictID$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$4,"ZDICT_getDictID");
    }
    /**
     * {@snippet :
     * unsigned int ZDICT_getDictID(void* dictBuffer, size_t dictSize);
     * }
     */
    public static int ZDICT_getDictID(MemorySegment dictBuffer, long dictSize) {
        var mh$ = ZDICT_getDictID$MH();
        try {
            return (int)mh$.invokeExact(dictBuffer, dictSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZDICT_getDictHeaderSize$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$5,"ZDICT_getDictHeaderSize");
    }
    /**
     * {@snippet :
     * size_t ZDICT_getDictHeaderSize(void* dictBuffer, size_t dictSize);
     * }
     */
    public static long ZDICT_getDictHeaderSize(MemorySegment dictBuffer, long dictSize) {
        var mh$ = ZDICT_getDictHeaderSize$MH();
        try {
            return (long)mh$.invokeExact(dictBuffer, dictSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZDICT_isError$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$0,"ZDICT_isError");
    }
    /**
     * {@snippet :
     * unsigned int ZDICT_isError(size_t errorCode);
     * }
     */
    public static int ZDICT_isError(long errorCode) {
        var mh$ = ZDICT_isError$MH();
        try {
            return (int)mh$.invokeExact(errorCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZDICT_getErrorName$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$1,"ZDICT_getErrorName");
    }
    /**
     * {@snippet :
     * char* ZDICT_getErrorName(size_t errorCode);
     * }
     */
    public static MemorySegment ZDICT_getErrorName(long errorCode) {
        var mh$ = ZDICT_getErrorName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(errorCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .ZSTD_error_no_error = 0;
     * }
     */
    public static int ZSTD_error_no_error() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_error_GENERIC = 1;
     * }
     */
    public static int ZSTD_error_GENERIC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_error_prefix_unknown = 10;
     * }
     */
    public static int ZSTD_error_prefix_unknown() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_error_version_unsupported = 12;
     * }
     */
    public static int ZSTD_error_version_unsupported() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_error_frameParameter_unsupported = 14;
     * }
     */
    public static int ZSTD_error_frameParameter_unsupported() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_error_frameParameter_windowTooLarge = 16;
     * }
     */
    public static int ZSTD_error_frameParameter_windowTooLarge() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_error_corruption_detected = 20;
     * }
     */
    public static int ZSTD_error_corruption_detected() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_error_checksum_wrong = 22;
     * }
     */
    public static int ZSTD_error_checksum_wrong() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_error_literals_headerWrong = 24;
     * }
     */
    public static int ZSTD_error_literals_headerWrong() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_error_dictionary_corrupted = 30;
     * }
     */
    public static int ZSTD_error_dictionary_corrupted() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_error_dictionary_wrong = 32;
     * }
     */
    public static int ZSTD_error_dictionary_wrong() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_error_dictionaryCreation_failed = 34;
     * }
     */
    public static int ZSTD_error_dictionaryCreation_failed() {
        return (int)34L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_error_parameter_unsupported = 40;
     * }
     */
    public static int ZSTD_error_parameter_unsupported() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_error_parameter_combination_unsupported = 41;
     * }
     */
    public static int ZSTD_error_parameter_combination_unsupported() {
        return (int)41L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_error_parameter_outOfBound = 42;
     * }
     */
    public static int ZSTD_error_parameter_outOfBound() {
        return (int)42L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_error_tableLog_tooLarge = 44;
     * }
     */
    public static int ZSTD_error_tableLog_tooLarge() {
        return (int)44L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_error_maxSymbolValue_tooLarge = 46;
     * }
     */
    public static int ZSTD_error_maxSymbolValue_tooLarge() {
        return (int)46L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_error_maxSymbolValue_tooSmall = 48;
     * }
     */
    public static int ZSTD_error_maxSymbolValue_tooSmall() {
        return (int)48L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_error_stabilityCondition_notRespected = 50;
     * }
     */
    public static int ZSTD_error_stabilityCondition_notRespected() {
        return (int)50L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_error_stage_wrong = 60;
     * }
     */
    public static int ZSTD_error_stage_wrong() {
        return (int)60L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_error_init_missing = 62;
     * }
     */
    public static int ZSTD_error_init_missing() {
        return (int)62L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_error_memory_allocation = 64;
     * }
     */
    public static int ZSTD_error_memory_allocation() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_error_workSpace_tooSmall = 66;
     * }
     */
    public static int ZSTD_error_workSpace_tooSmall() {
        return (int)66L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_error_dstSize_tooSmall = 70;
     * }
     */
    public static int ZSTD_error_dstSize_tooSmall() {
        return (int)70L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_error_srcSize_wrong = 72;
     * }
     */
    public static int ZSTD_error_srcSize_wrong() {
        return (int)72L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_error_dstBuffer_null = 74;
     * }
     */
    public static int ZSTD_error_dstBuffer_null() {
        return (int)74L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_error_noForwardProgress_destFull = 80;
     * }
     */
    public static int ZSTD_error_noForwardProgress_destFull() {
        return (int)80L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_error_noForwardProgress_inputEmpty = 82;
     * }
     */
    public static int ZSTD_error_noForwardProgress_inputEmpty() {
        return (int)82L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_error_frameIndex_tooLarge = 100;
     * }
     */
    public static int ZSTD_error_frameIndex_tooLarge() {
        return (int)100L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_error_seekableIO = 102;
     * }
     */
    public static int ZSTD_error_seekableIO() {
        return (int)102L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_error_dstBuffer_wrong = 104;
     * }
     */
    public static int ZSTD_error_dstBuffer_wrong() {
        return (int)104L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_error_srcBuffer_wrong = 105;
     * }
     */
    public static int ZSTD_error_srcBuffer_wrong() {
        return (int)105L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_error_sequenceProducer_failed = 106;
     * }
     */
    public static int ZSTD_error_sequenceProducer_failed() {
        return (int)106L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_error_externalSequences_invalid = 107;
     * }
     */
    public static int ZSTD_error_externalSequences_invalid() {
        return (int)107L;
    }
    /**
     * {@snippet :
     * enum .ZSTD_error_maxCode = 120;
     * }
     */
    public static int ZSTD_error_maxCode() {
        return (int)120L;
    }
    public static MethodHandle ZSTD_getErrorCode$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$2,"ZSTD_getErrorCode");
    }
    /**
     * {@snippet :
     * ZSTD_ErrorCode ZSTD_getErrorCode(size_t functionResult);
     * }
     */
    public static int ZSTD_getErrorCode(long functionResult) {
        var mh$ = ZSTD_getErrorCode$MH();
        try {
            return (int)mh$.invokeExact(functionResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZSTD_getErrorString$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$4,"ZSTD_getErrorString");
    }
    /**
     * {@snippet :
     * char* ZSTD_getErrorString(ZSTD_ErrorCode code);
     * }
     */
    public static MemorySegment ZSTD_getErrorString(int code) {
        var mh$ = ZSTD_getErrorString$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * #define __DARWIN_SUF_64_BIT_INO_T "$INODE64"
     * }
     */
    public static MemorySegment __DARWIN_SUF_64_BIT_INO_T() {
        return constants$19.const$5;
    }
    /**
     * {@snippet :
     * #define __DARWIN_SUF_1050 "$1050"
     * }
     */
    public static MemorySegment __DARWIN_SUF_1050() {
        return constants$20.const$0;
    }
    /**
     * {@snippet :
     * #define __DARWIN_SUF_EXTSN "$DARWIN_EXTSN"
     * }
     */
    public static MemorySegment __DARWIN_SUF_EXTSN() {
        return constants$20.const$1;
    }
    /**
     * {@snippet :
     * #define __DARWIN_C_ANSI 4096
     * }
     */
    public static long __DARWIN_C_ANSI() {
        return 4096L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_C_FULL 900000
     * }
     */
    public static long __DARWIN_C_FULL() {
        return 900000L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_C_LEVEL 900000
     * }
     */
    public static long __DARWIN_C_LEVEL() {
        return 900000L;
    }
    /**
     * {@snippet :
     * #define CLK_TCK 100
     * }
     */
    public static int CLK_TCK() {
        return (int)100L;
    }
    /**
     * {@snippet :
     * #define SCHAR_MIN -128
     * }
     */
    public static int SCHAR_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define CHAR_MIN -128
     * }
     */
    public static int CHAR_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define SHRT_MIN -32768
     * }
     */
    public static int SHRT_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet :
     * #define UINT_MAX 4294967295
     * }
     */
    public static int UINT_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define INT_MIN -2147483648
     * }
     */
    public static int INT_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define ULONG_MAX -1
     * }
     */
    public static long ULONG_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define LONG_MAX 9223372036854775807
     * }
     */
    public static long LONG_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define LONG_MIN -9223372036854775808
     * }
     */
    public static long LONG_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define ULLONG_MAX -1
     * }
     */
    public static long ULLONG_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define LLONG_MAX 9223372036854775807
     * }
     */
    public static long LLONG_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define LLONG_MIN -9223372036854775808
     * }
     */
    public static long LLONG_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define SSIZE_MAX 9223372036854775807
     * }
     */
    public static long SSIZE_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define SIZE_T_MAX -1
     * }
     */
    public static long SIZE_T_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define UQUAD_MAX -1
     * }
     */
    public static long UQUAD_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define QUAD_MAX 9223372036854775807
     * }
     */
    public static long QUAD_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define QUAD_MIN -9223372036854775808
     * }
     */
    public static long QUAD_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define ARG_MAX 1048576
     * }
     */
    public static int ARG_MAX() {
        return (int)1048576L;
    }
    /**
     * {@snippet :
     * #define GID_MAX 2147483647
     * }
     */
    public static int GID_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define UID_MAX 2147483647
     * }
     */
    public static int UID_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define _POSIX_RE_DUP_MAX 255
     * }
     */
    public static int _POSIX_RE_DUP_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define OFF_MIN -9223372036854775808
     * }
     */
    public static long OFF_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define OFF_MAX 9223372036854775807
     * }
     */
    public static long OFF_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define LONG_LONG_MAX 9223372036854775807
     * }
     */
    public static long LONG_LONG_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define LONG_LONG_MIN -9223372036854775808
     * }
     */
    public static long LONG_LONG_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define ULONG_LONG_MAX -1
     * }
     */
    public static long ULONG_LONG_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define NULL 0
     * }
     */
    public static MemorySegment NULL() {
        return constants$20.const$2;
    }
    /**
     * {@snippet :
     * #define ZSTD_VERSION_NUMBER 10505
     * }
     */
    public static int ZSTD_VERSION_NUMBER() {
        return (int)10505L;
    }
    /**
     * {@snippet :
     * #define ZSTD_VERSION_STRING "1.5.5"
     * }
     */
    public static MemorySegment ZSTD_VERSION_STRING() {
        return constants$20.const$3;
    }
    /**
     * {@snippet :
     * #define ZSTD_MAGICNUMBER 4247762216
     * }
     */
    public static int ZSTD_MAGICNUMBER() {
        return (int)4247762216L;
    }
    /**
     * {@snippet :
     * #define ZSTD_MAGIC_DICTIONARY 3962610743
     * }
     */
    public static int ZSTD_MAGIC_DICTIONARY() {
        return (int)3962610743L;
    }
    /**
     * {@snippet :
     * #define ZSTD_MAGIC_SKIPPABLE_MASK 4294967280
     * }
     */
    public static int ZSTD_MAGIC_SKIPPABLE_MASK() {
        return (int)4294967280L;
    }
    /**
     * {@snippet :
     * #define ZSTD_BLOCKSIZE_MAX 131072
     * }
     */
    public static int ZSTD_BLOCKSIZE_MAX() {
        return (int)131072L;
    }
    /**
     * {@snippet :
     * #define ZSTD_CONTENTSIZE_UNKNOWN -1
     * }
     */
    public static long ZSTD_CONTENTSIZE_UNKNOWN() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define ZSTD_CONTENTSIZE_ERROR -2
     * }
     */
    public static long ZSTD_CONTENTSIZE_ERROR() {
        return -2L;
    }
    /**
     * {@snippet :
     * #define ZSTD_MAX_INPUT_SIZE -71777214294589696
     * }
     */
    public static long ZSTD_MAX_INPUT_SIZE() {
        return -71777214294589696L;
    }
}


